AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Chatbot Infrastructure - DynamoDB, Lambda, API Gateway'

Parameters:
  DynamoDBTableName:
    Type: String
    Default: ChatbotConversations
    Description: Name of the DynamoDB table for conversation storage
  
  LambdaFunctionName:
    Type: String
    Default: ChatbotFunction
    Description: Name of the Lambda function
  
  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Bedrock model ID to use
    AllowedValues:
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
      - anthropic.claude-v2:1
      - meta.llama2-70b-chat-v1

Resources:
  # DynamoDB Table for Conversation Storage
  ChatbotConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      Tags:
        - Key: Application
          Value: LangChainChatbot
        - Key: Environment
          Value: Production

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ChatbotLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:ListFoundationModels
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ChatbotConversationsTable.Arn

  # Lambda Function (placeholder - code must be uploaded separately)
  ChatbotLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.11
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          BEDROCK_MODEL_ID: !Ref BedrockModelId
      Code:
        ZipFile: |
          # Placeholder code - deploy actual code using:
          # aws lambda update-function-code --function-name ChatbotFunction --zip-file fileb://lambda_deployment.zip
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Chatbot function created. Please upload actual code.'
              }
      Tags:
        - Key: Application
          Value: LangChainChatbot

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      RetentionInDays: 7

  # HTTP API Gateway
  ChatbotHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatbotAPI
      ProtocolType: HTTP
      Description: API Gateway for AWS Chatbot
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization

  # Lambda Integration
  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ChatbotHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # API Route
  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatbotHttpApi
      RouteKey: 'POST /chat'
      Target: !Sub 'integrations/${LambdaIntegration}'

  # Health Check Route
  HealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatbotHttpApi
      RouteKey: 'GET /health'
      Target: !Sub 'integrations/${LambdaIntegration}'

  # API Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ChatbotHttpApi
      StageName: prod
      AutoDeploy: true
      Description: Production stage

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatbotLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatbotHttpApi}/*/*'

Outputs:
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref ChatbotConversationsTable
    Export:
      Name: ChatbotDynamoDBTable

  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ChatbotLambdaFunction.Arn
    Export:
      Name: ChatbotLambdaArn

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ChatbotHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: ChatbotApiEndpoint

  ChatEndpoint:
    Description: Chat endpoint URL
    Value: !Sub 'https://${ChatbotHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'

  HealthCheckEndpoint:
    Description: Health check endpoint URL
    Value: !Sub 'https://${ChatbotHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod/health'

